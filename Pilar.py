#!/usr/bin/env python3
import os
from openai import OpenAI
import streamlit as st

# 1. Cl√© API hardcod√©e (‚ö†Ô∏è Ne pas versionner publiquement)
api_key = st.secrets.get("OPENAI_KEY")
client = OpenAI(api_key=api_key)

# 2. Liste des services
services = [
    "Audit √©nerg√©tique complet: R√©alisation d‚Äôun diagnostic de la consommation (b√¢timents, process industriels) et identification des postes d‚Äôoptimisation pour r√©duire les co√ªts et l‚Äôempreinte carbone.",
    "Solutions d‚Äôefficacit√© √©nerg√©tique: Mise en place de syst√®mes d‚Äô√©clairage LED, pompes √† haut rendement, variateurs de fr√©quence, isolation thermique et optimisation des √©quipements CVC (chauffage, ventilation, climatisation).",
    "Installation de panneaux photovolta√Øques: conception, pose, maintenance.",
    "Stockage d‚Äô√©nergie par batteries: Fourniture et installation de batteries domestiques ou de moyenne capacit√© (stationnaire) pour lisser la demande, profiter du pic solaire et s√©curiser l‚Äôalimentation.",
    "Bornes de recharge Voitures El√©ctriques: Installation et gestion de bornes de recharge intelligentes (AC/DC) √† domicile, en entreprise ou dans les parcs publics, avec gestion de la demande et facturation associ√©e.",
    "Contrats de performance √©nerg√©tique (CPE): Garantie de r√©sultat sur les √©conomies d‚Äô√©nergie, financement des travaux par les √©conomies g√©n√©r√©es, avec suivi et reporting p√©riodique des gains.",
    "EMS/BMS: supervision & pilotage automatis√© de la consommation: Mise en place de syst√®mes de gestion de l‚Äô√©nergie ou des b√¢timents (Energy/Building Management Systems) pour monitorer en temps r√©el et piloter automatiquement la consommation.",
    "Fourniture d‚Äô√©lectricit√© verte: Vente de kWh certifi√©s 100 % renouvelables (hydraulique, √©olien, solaire), √©ventuellement coupl√©s √† des garanties d‚Äôorigine et des labels (EKO√©nergies, T√úV).",
    "Conseil en aides & subventions (CEE, cr√©dits d‚Äôimp√¥t): Accompagnement pour monter des dossiers de certificats d‚Äô√©conomies d‚Äô√©nergie (CEE), cr√©dits d‚Äôimp√¥t, aides cantonales ou f√©d√©rales (Programme B√¢timents, ProKilowatt), et conformit√© aux normes (ISO 50001, RE2020).",
    "Programmes de flexibilit√© & gestion de la demande: Animation de dispositifs de d√©lestage, agr√©gation de la flexibilit√© (pour r√©pondre aux besoins des r√©seaux) et participation aux march√©s de capacit√© ou d‚Äôeffacement √©nerg√©tiques."
]

# 3. Message syst√®me
system_content = (
    "Tu t'appelles Pilar et ton entreprise se nomme \"Ecopillier S√†rl\", situ√©e Rue Jean-Charles AMAT 1, 1202 Gen√®ve. "
    "Tu es experte en √©nergie. R√©pond au client en fonction des services de ton entreprises que tu proposes.\n"
    "Prestations sont :\n- " + "\n- ".join(services) + "R√©pond logiquement selon l'historique des conversations"
)

# 4. Configuration de la page
st.set_page_config(
    page_title="Ecopillier Chatbot",
    page_icon="‚ö°",
    layout="wide"
)

# 5. CSS custom pour le style
st.markdown(
    """
    <style>
    /* Fond neutre, plus sobre */

    .chat-container {
      max-width:800px;
      margin:auto;
      padding:10px;
      display:flex;
      flex-direction:column;
    }
    .chat-user {
      background-color:#C0E0A8;
      color:#000000;
      padding:12px;
      border-radius:12px;
      width:fit-content;
      align-self:flex-start;
    }
    .chat-assistant {
      background-color:#E0E0E0;
      color:#000000;
      padding:12px;
      border-radius:12px;
      margin:15px 0 15px 100px;  /* top right bottom left */
      width:fit-content;
      align-self:flex-end;
    }
    .sidebar .stSidebar { background-color:#ffffffcc; }
    
    @keyframes blink {
      0%,100% {opacity:.2;}
      20% {opacity:1;}
    }
    .typing-dot {
      display:inline-block;
      background-color:#888;
      width:8px; height:8px; border-radius:50%;
      margin:0 2px;
      animation:blink 1.4s infinite both;
    }
    .typing-dot:nth-child(2) {animation-delay:.2s;}
    .typing-dot:nth-child(3) {animation-delay:.4s;}
    .chat-typing {
      background-color:#E0E0E0;
      color:#000000;
      padding:12px;
      border-radius:12px;
      margin:8px 0 8px 915px;  /* top right bottom left */
      width:fit-content;
      align-self:flex-end;
    }
    </style>
    """,
    unsafe_allow_html=True
)

# 6. Barre lat√©rale
with st.sidebar:
    st.title("Ecopillier S√†rl")
    st.write("‚ö° Expert en solutions √©nerg√©tiques")
    st.write("üìç Rue Jean-Charles AMAT 1, 1202 Gen√®ve")
    st.write("---")
    st.title("Services")
    st.write("1. Audit √©nerg√©tique complet")
    st.write("2. Solutions d‚Äôefficacit√© √©nerg√©tique")
    st.write("3. Installation de panneaux photovolta√Øques")
    st.write("4. Stockage d‚Äô√©nergie par batteries")
    st.write("5. Bornes de recharge pour v√©hicules √©lectriques")
    st.write("6. Contrats de performance √©nerg√©tique (CPE)") 
    st.write("7. Solutions de pilotage et supervision (EMS/BMS)") 
    st.write("8. Offres de fourniture d‚Äô√©lectricit√© verte") 
    st.write("9. Conseil en aides, subventions et r√©gulations") 
    st.write("10. Programmes de flexibilit√© et gestion de la demande") 
    
# 7. Titre principal
st.markdown("<h1 style='text-align:center;'>üí¨ Chat avec EcoPillier</h1>", unsafe_allow_html=True)

# 8. Initialisation de l'historique
if "history" not in st.session_state:
    st.session_state.history = []
if "loading" not in st.session_state:
    st.session_state.loading = False
if "new_prompt" not in st.session_state:
    st.session_state.new_prompt = ""

# 9. Affichage du chat
for turn in st.session_state.history:
    st.markdown(
        f"<div class='chat-user'><strong>Vous¬†:</strong><br>{turn['user']}</div>",
        unsafe_allow_html=True
    )
    if turn["assistant"] is None:
        st.markdown(
            "<div class='chat-typing'><strong>EcoPillier¬†:</strong><br>"
            "<span class='typing-dot'></span><span class='typing-dot'></span><span class='typing-dot'></span>"
            "</div>",
            unsafe_allow_html=True
        )
    else:
        st.markdown(
            f"<div class='chat-assistant'><strong>EcoPillier¬†:</strong><br>{turn['assistant']}</div>",
            unsafe_allow_html=True
        )

# 10. Zone de saisie
if prompt := st.chat_input("Comment pouvous-nous vous aider ?"):
    st.session_state.history.append({"user": prompt, "assistant": None})
    st.session_state.new_prompt = prompt
    st.session_state.loading = True
    st.rerun()

# 11. Traitement de la requ√™te si chargement
if st.session_state.loading:
    # Construire l'historique complet pour le mod√®le
    messages = [{"role": "system", "content": system_content}]
    for turn in st.session_state.history[:-1]:
        messages.append({"role": "user", "content": turn["user"]})
        messages.append({"role": "assistant", "content": turn["assistant"]})
    messages.append({"role": "user", "content": st.session_state.new_prompt})
    
    resp = client.chat.completions.create(
        model="gpt-4o",
        messages=messages
    )
    answer = resp.choices[0].message.content.strip()
    st.session_state.history[-1]["assistant"] = answer
    st.session_state.loading = False
    st.session_state.new_prompt = ""
    st.rerun()
